package gov.sir.core.negocio.modelo;

import java.util.ArrayList;
import java.util.Collections;
import java.util.List;

import org.auriga.core.modelo.TransferObject;

/* Generated by JDO Genie (version:3.0.0 (08 Jun 2004)) */

/** Clase que modela la información de oficinas origen  */

public class OficinaOrigen implements TransferObject {
    private String idOficinaOrigen; // pk 
    private TipoOficina tipoOficina;
    private Vereda vereda;
    private CategoriaNotaria categoriaNotaria;
    private String numero;
    private String nombre;
	private List categorias = new ArrayList(); // contains OficinaOrigenCategoria  inverse OficinaOrigenCategoria.oficinaOrigen
	private boolean exentoDerechoNotarial;
	private String naturalezaJuridicaEntidad;
	private String direccion;
	private String telefono;
	private String encargado;
	private String email;
	private String fax;
        private static final long serialVersionUID = 1L;
        /*
         *  @author Carlos Torres
         *  @chage   se agrega validacion de version diferente
         *  @mantis
         */
        private Long version;

        /*
        *  @author Fernando Padilla Velez
        *  @chage  1203.AJUSTE.VERSION.CATEGORIA.REPARTO.NOTARIAL,
        *          Se crea el campo ID_UNICO de la tabla SIR_NE_OFICINA_ORIGEN
        */
        private String idUnico;
        
	/** Constructor por defecto */
    public OficinaOrigen() {
    }

    /** Retorna el identificador de la oficina origen  */
    public String getIdOficinaOrigen() {
        return idOficinaOrigen;
    }

    /** Cambia el identificador de la oficina origen  */
    public void setIdOficinaOrigen(String idOficinaOrigen) {
        this.idOficinaOrigen = idOficinaOrigen;
    }

    /** Retorna el identificador del tipo de oficina  */
    public TipoOficina getTipoOficina() {
        return tipoOficina;
    }
    
    /** Retorna la descripción de la naturaleza jurídica de la oficina origen, 
     * este campo agrupa entidades de acuerdo a sus funciones y al sector al que pertenecen */
	public String getNaturalezaJuridicaEntidad() {
		   return naturalezaJuridicaEntidad;
	   }
	
	/** Cambia el identificador del tipo de oficina   */
    public void setTipoOficina(TipoOficina tipoOficina) {
        this.tipoOficina = tipoOficina;
    }
    
	public boolean equals(Object o) {
		if (this == o) {
			return true;
		}

		if (!(o instanceof OficinaOrigen)) {
			return false;
		}

		final OficinaOrigen id = (OficinaOrigen) o;

		if ((this.idOficinaOrigen != null)
				? (!idOficinaOrigen.equals(id.idOficinaOrigen))
					: (id.idOficinaOrigen != null)) {
			return false;
		}
                 /*
             *  @author Carlos Torres
             *  @chage   se agrega validacion de version diferente
             *  @mantis 0013414: Acta - Requerimiento No 069_453_Código_Notaria_NC
             */
                if (this.version !=  id.version ) return false;
		return true;
	}

    /** Retorna el nombre de la oficina origen
	 * @return nombre	 */
	public String getNombre() {
		return nombre;
	}

	/** Retorna el número de la oficina origen
	 * @return numero
	 */
	public String getNumero() {
		return numero;
	}

	/** Cambia el nombre de la oficina origen
	 * @param string	 */
	public void setNombre(String string) {
		nombre = string;
	}

	/** Cambia la descripción de la naturaleza jurídica de la oficina origen, 
	 * este campo agrupa entidades de acuerdo a sus funciones y al sector al que pertenecen
    * @param naturaleza Nueva naturaleza Jurídica		*/
	
    public void setNaturalezaJuridicaEntidad(String naturaleza){
        naturalezaJuridicaEntidad = naturaleza;
    }
    
    /** Cambia el número de la oficina origen
	 * @param string		*/
	public void setNumero(String string) {
		numero = string;
	}

	/** Retorna el identificador de la vereda asociada
	 * @return vereda    	 */
	public Vereda getVereda() {
		return vereda;
	}

	/** Cambia el identificador de la vereda asociada
	 * @param vereda    	 */
	public void setVereda(Vereda vereda) {
		this.vereda = vereda;
	}
	
	/** Retorna la lista categorias */
	public List getCategorias() {
		return Collections.unmodifiableList(categorias);
	}

	/** Añade una categoría a la lista categorias */
	public boolean addCategoria(OficinaCategoria newCategoria) {
		return categorias.add(newCategoria);
	}

	/** Cambia una categoría a la lista categorias */
	public boolean removeCategoria(OficinaCategoria oldCategoria) {
		return categorias.remove(oldCategoria);
	}

	/** Indica si la oficina origen es exenta de derechos notariales
	 * @return
	 */
	public boolean isExentoDerechoNotarial() {
		return exentoDerechoNotarial;
	}

	/** Modifica si la oficina origen es exenta de derechos notariales
	 * @param b
	 */
	public void setExentoDerechoNotarial(boolean b) {
		exentoDerechoNotarial = b;
	}

	/** Retorna la direccion
	 * @return
	 */
	public String getDireccion() {
		return direccion;
	}

	/** Retorna el email
	 * @return
	 */
	public String getEmail() {
		return email;
	}

	/** Retorna el nombre del encargado
	 * @return
	 */
	public String getEncargado() {
		return encargado;
	}

	/** Retorna el numero de fax
	 * @return
	 */
	public String getFax() {
		return fax;
	}

	/** Retorna el numero telefonico
	 * @return
	 */
	public String getTelefono() {
		return telefono;
	}

	/** Modifica la direccion
	 * @param string
	 */
	public void setDireccion(String string) {
		direccion = string;
	}

	/** Modifica el email
	 * @param string
	 */
	public void setEmail(String string) {
		email = string;
	}

	/** Modifica el nombre del encargado
	 * @param string
	 */
	public void setEncargado(String string) {
		encargado = string;
	}

	/** Modifica el numero de fax
	 * @param string
	 */
	public void setFax(String string) {
		fax = string;
	}

	/** Modifica el numero telefonico
	 * @param string
	 */
	public void setTelefono(String string) {
		telefono = string;
	}

	
	/**
	 * Retorna la categoría en la que está clasificada una oficina origen,
	 * en el caso en el que sea una notaría.
	 * @return categoriaNotaria
	 */
	public CategoriaNotaria getCategoriaNotaria() {
		return categoriaNotaria;
	}

	
	/**
	 * Modifica la categoría en la que está clasificada una oficina origen,
	 * @param categoriaNotaria la Categoria en la que va a ser clasificada la Notaría.
	 */	
	public void setCategoriaNotaria(CategoriaNotaria categoriaNotaria) {
		this.categoriaNotaria = categoriaNotaria;
	}

             /*
             *  @author Carlos Torres
             *  @chage   se agrega validacion de version diferente
             *  @mantis 0013414: Acta - Requerimiento No 069_453_Código_Notaria_NC
             */
        public Long getVersion() {
            return version;
        }

        public void setVersion(Long version) {
            this.version = version;
        }

    public String getIdUnico() {
        return idUnico;
    }

    public void setIdUnico(String idUnico) {
        this.idUnico = idUnico;
    }


}
