package gov.sir.core.negocio.modelo;
import org.auriga.core.modelo.TransferObject;

/*
 * Generated by JDO Genie (version:3.0.0 (08 Jun 2004))
 */

/**
 * Clase que modela las cancelaciones, es decir, una relación entre una anotación que cancela a otra dentro del mismo folio
 */
public class Cancelacion implements TransferObject{
    private String idAnotacion; // pk 
    private String idAnotacion1; // pk 
    private String idMatricula; // pk 
    private String descripcion;
    private Anotacion cancelada;
    private Anotacion canceladora; // inverse Anotacion.anotacionesCancelacion
	private boolean toDelete;
        private static final long serialVersionUID = 1L;
	/** Constructor por defecto */
    public Cancelacion() {
    }

    /**
     * Retorna el identificador de la anotación cancelada
     * @return idAnotacion
     */
    public String getIdAnotacion() {
        return idAnotacion;
    }

    /**
     * Cambia el identificador de la anotación cancelada
     * @param idAnotacion
     */
    public void setIdAnotacion(String idAnotacion) {
        this.idAnotacion = idAnotacion;
    }

    /**
     * Retorna el identificador de la anotación canceladora
     * @return idAnotacion
     */
    public String getIdAnotacion1() {
        return idAnotacion1;
    }

    /**
     * Cambia el identificador de la anotación canceladora
     * @param idAnotacion
     */
    public void setIdAnotacion1(String idAnotacion1) {
        this.idAnotacion1 = idAnotacion1;
    }

    /**
     * Retorna el identificador de folio
     * @return idMatricula
     */
    public String getIdMatricula() {
        return idMatricula;
    }

    /**
     * Cambia el identificador de folio
     * @param idmatricula
     */
    public void setIdMatricula(String idMatricula) {
        this.idMatricula = idMatricula;
    }


    /**
     * Retorna la descripción de la cancelación
     * @return descripcion
     */
    public String getDescripcion() {
        return descripcion;
    }

    /**
     * Cambia la descripción de la cancelación
     * @param descripcion
     */
    public void setDescripcion(String descripcion) {
        this.descripcion = descripcion;
    }

    /** Retorna la anotacion cancelada  */
    
    public Anotacion getCancelada() {
        return cancelada;
    }

    /** Modifica la anotacion cancelada  */
    
    public void setCancelada(Anotacion cancelada) {
        this.cancelada = cancelada;
		this.setIdAnotacion1(cancelada.getIdAnotacion());
		setIdMatricula(cancelada.getIdMatricula());
    }

    /** Retorna la anotacion canceladora  */
    
    public Anotacion getCanceladora() {
        return canceladora;
    }

    /** Modifica la anotacion canceladora  */
    
    public void setCanceladora(Anotacion canceladora) {
        this.canceladora = canceladora;
        setIdAnotacion(canceladora.getIdAnotacion());
        setIdMatricula(canceladora.getIdMatricula());
    }

    /** Indica que el registro se encuentra marcado para eliminarlo en definitivo
	 * @return
	 */
	public boolean isToDelete() {
		return toDelete;
	}

	/** Cambia la marca que indica que el registro se encuentra marcado para eliminarlo en definitivo
	 * @param b
	 */
	public void setToDelete(boolean b) {
		toDelete = b;
	}
	
	public boolean equals(Object o) {
		if (this == o) {
			return true;
		}

		if (!(o instanceof Cancelacion)) {
			return false;
		}

		final Cancelacion id = (Cancelacion) o;

		if ((this.idAnotacion != null)
				? (!idAnotacion.equals(id.idAnotacion))
					: (id.idAnotacion != null)) {
			return false;
		}

		if ((this.idAnotacion1 != null)
				? (!idAnotacion1.equals(id.idAnotacion1))
					: (id.idAnotacion1 != null)) {
			return false;
		}

		if ((this.idMatricula != null)
				? (!idMatricula.equals(id.idMatricula))
					: (id.idMatricula != null)) {
			return false;
		}


		return true;
	}

}
