package gov.sir.core.negocio.modelo;

import gov.sir.core.negocio.modelo.util.AnotacionCiudadanoComparator;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.List;
import org.auriga.core.modelo.TransferObject;


/*
 * Generated by JDO Genie (version:3.0.0 (08 Jun 2004))
 */

/**
 * Clase que modela las anotaciones del folio
 */
public class Anotacion implements TransferObject {
    private String idAnotacion; // pk
    private String idMatricula; // pk
    private String comentario;
    private Date fecha;
    private static final long serialVersionUID = 1L;
    /**
     * Valor asociado a la anotacion
     */
    private double valor;
    private String modalidad;
    private Documento documento;
    private Folio folio; // inverse Folio.anotaciones
    private NaturalezaJuridica naturalezaJuridica;
    private TipoAnotacion tipoAnotacion;
    private List anotacionesCancelacion = new ArrayList(); // contains Cancelacion  inverse Cancelacion.canceladora
    private List anotacionesCiudadano = new ArrayList(); // contains AnotacionCiudadano  inverse AnotacionCiudadano.anotacion
    private List anotacionesHijos = new ArrayList(); // contains FolioDerivado  inverse FolioDerivado.padre
    private List anotacionesPadre = new ArrayList(); // contains FolioDerivado  inverse FolioDerivado.hijo
    private List salvedades = new ArrayList(); // contains SalvedadAnotacion  inverse SalvedadAnotacion.anotacion
    private String numRadicacion;
    private Date fechaRadicacion;
    private EstadoAnotacion estado;
    private String orden;
    private String especificacion;
    private long lastIdSalvedad;
    private Usuario usuarioCreacion;
	private List turnoAnotacion = new ArrayList(); // contains TurnoAnotacion  inverse TurnoAnotacion.anotacion
	private boolean toDelete;
	private boolean temporal;
	private boolean temporalConContraparteDefinitiva;
	private String idAnotacionModificada;
	private boolean toUpdateValor;
	private Usuario usuarioCreacionTMP;
	private DatosAntiguoSistema datosAntiguoSistema;
	private String ordenLPAD;
	private boolean heredada;
	private boolean link;
	private String idWorkflow;
	private String circulo;
	private boolean anotacionesCiudadanoOrdenada = false;

	public String getIdWorkflow() {
		return idWorkflow;
	}

	public void setIdWorkflow(String idWorkflow) {
		this.idWorkflow = idWorkflow;
	}

	/** Constructor por defecto */
    public Anotacion() {
    }
    
    /**
     * Retorna el identificador de la anotacion relativo al folio
     * @return idAnotacion
     */
    public String getIdAnotacion() {
        return idAnotacion;
    }

    /**
     * Cambia el identificador de la anotacion relativo al folio
     * @param idAnotacion
     */
    public void setIdAnotacion(String idAnotacion) {
        this.idAnotacion = idAnotacion;
    }
    
    /**
     * Obtiene el identificador del folio
     * @return idMatricula
     */
    public String getIdMatricula() {
        return idMatricula;
    }

    /**
     * Cambia el identificador del folio
     * @paranm idMatricula
     */
    public void setIdMatricula(String idMatricula) {
        this.idMatricula = idMatricula;
    }

    
    /**
     * Retorna el comentario de la anotacion
     * @return comentario
     */
    public String getComentario() {
        return comentario;
    }

    /**
     * Cambia el comentario de la anotacion
     * @param comentario
     */
    public void setComentario(String comentario) {
        this.comentario = comentario;
    }

    /**
     * Retorna la fecha de creación de registro en la base de datos
     * @return fecha
     */
    public Date getFecha() {
        return fecha;
    }

    /**
     * Cambia la fecha de creación de registro en la base de datos
     * @paranm fecha
     */
    public void setFecha(Date fecha) {
        this.fecha = fecha;
    }

    /**
     * Obtiene el valor asociado a la anotacion
     * @return valor
     */
    public double getValor() {
        return valor;
    }

    /**
     * Cambia el valor asociado a la anotacion
     * @param valor
     */
    public void setValor(double valor) {
        this.valor = valor;
    }

    public String getModalidad() {
        return modalidad;
    }

    public void setModalidad(String modalidad) {
        this.modalidad = modalidad;
    }

    /**
     * Retorna el identificador del documento asociado a la anotacion
     * @return documento
     */
    public Documento getDocumento() {
        return documento;
    }

    /**
     * Cambia el identificador del documento asociado a la anotacion
     * @paranm documento
     */
    public void setDocumento(Documento documento) {
        this.documento = documento;
    }

    /**
     * Retorna la información relativa al folio
     * @return folio
     */
    public Folio getFolio() {
        return folio;
    }

    /**
     * Cambia la información relativa al folio     */
    public void setFolio(Folio folio) {
        this.folio = folio;
        setIdMatricula(folio.getIdMatricula());
    }

    /**
     * Retorna el identificador de la naturaleza juridica asociada a la anotacion
     * @return naturalezaJuridica
     */
    public NaturalezaJuridica getNaturalezaJuridica() {
        return naturalezaJuridica;
    }

    /**
     * Cambia el identificador de la naturaleza juridica asociada a la anotacion
     * @paranm naturalezaJuridca
     */
    public void setNaturalezaJuridica(NaturalezaJuridica naturalezaJuridica) {
        this.naturalezaJuridica = naturalezaJuridica;
    }

    /**
     * Retorna el identificador del tipo de anotacion
     * @return tipoAnotacion
     */
    public TipoAnotacion getTipoAnotacion() {
        return tipoAnotacion;
    }

    /**
     * Cambia el identificador del tipo de anotacion
     * @paranm tipoAnotacion
     */
    public void setTipoAnotacion(TipoAnotacion tipoAnotacion) {
        this.tipoAnotacion = tipoAnotacion;
    }

    /**
     * Retorna la lista anotacionesCancelacion
     * @return List anotacionesCancelacion
     */
    public List getAnotacionesCancelacions() {
        /**
        * @Autor: Edgar Lora
        * @Mantis 11599
        * @Requerimiento 085_151
        */
        return anotacionesCancelacion;
    }

    /**
     * Adiciona una cancelación a la lista anotacionesCancelacion
     */
    public boolean addAnotacionesCancelacion(
        Cancelacion newAnotacionesCancelacion) {
    	anotacionesCiudadanoOrdenada = false;
        return anotacionesCancelacion.add(newAnotacionesCancelacion);
    }

    /**
     * Elimina una cancelacion de la lista anotacionesCancelacion
     */
    public boolean removeAnotacionesCancelacion(
        Cancelacion oldAnotacionesCancelacion) {
        return anotacionesCancelacion.remove(oldAnotacionesCancelacion);
    }

    /**
     * Retorna la lista anotacionesCiudadano
     */
    public List getAnotacionesCiudadanos() {
    	if (!anotacionesCiudadanoOrdenada)
    	{
    		Collections.sort(anotacionesCiudadano, new AnotacionCiudadanoComparator());
    		anotacionesCiudadanoOrdenada = true;
    	}
        return Collections.unmodifiableList(anotacionesCiudadano);
    }

    /**
     * Adiciona una AnotacionCiudadano a la lista anotacionesCiudadano
     */
    public boolean addAnotacionesCiudadano(
        AnotacionCiudadano newAnotacionesCiudadano) {
        return anotacionesCiudadano.add(newAnotacionesCiudadano);
    }

    /**
     * Elimina una AnotacionCiudadano de la lista anotacionesCiudadano
     */
    public boolean removeAnotacionesCiudadano(
        AnotacionCiudadano oldAnotacionesCiudadano) {
        return anotacionesCiudadano.remove(oldAnotacionesCiudadano);
    }

    /**
     * Retorna la lista anotacionesHijos
     */
    public List getAnotacionesHijos() {
        /**
        * @Autor: Edgar Lora
        * @Mantis 11599
        * @Requerimiento 085_151
        */
        return anotacionesHijos;
    }

    /**
     * Adiciona una AnotacionesHijo a la lista anotacionesHijo
     */
    public boolean addAnotacionesHijo(FolioDerivado newAnotacionesHijo) {
        return anotacionesHijos.add(newAnotacionesHijo);
    }

    /**
     * Elimina una AnotacionesHijo a la lista anotacionesHijo
     */
    public boolean removeAnotacionesHijo(FolioDerivado oldAnotacionesHijo) {
        return anotacionesHijos.remove(oldAnotacionesHijo);
    }

    /**
     * Retorna la lista anotacionesPadre
     */
    public List getAnotacionesPadre() {
        /**
        * @Autor: Edgar Lora
        * @Mantis 11599
        * @Requerimiento 085_151
        */
        return anotacionesPadre;
    }

    /**
     * Adiociona una AnotacionesPadre a la lista anotacionesPadre
     */
    public boolean addAnotacionesPadre(FolioDerivado newAnotacionesPadre) {
        return anotacionesPadre.add(newAnotacionesPadre);
    }

    /**
     * Elimina una AnotacionesPadre a la lista anotacionesPadre
     */
    public boolean removeAnotacionesPadre(FolioDerivado oldAnotacionesPadre) {
        return anotacionesPadre.remove(oldAnotacionesPadre);
    }

    /**
     * Retorna la lista salvedades
     */
    public List getSalvedades() {
        return Collections.unmodifiableList(salvedades);
    }

    /**
     * Adiciona una salvedad a la lista salvedades
     */
    public boolean addSalvedade(SalvedadAnotacion newSalvedade) {
        return salvedades.add(newSalvedade);
    }

    /**
     * Elimina una salvedad de la lista salvedades
     */
    public boolean removeSalvedade(SalvedadAnotacion oldSalvedade) {
        return salvedades.remove(oldSalvedade);
    }

    /**
     * Retorna la fecha del turno que crea la anotación
     * @return fehcaRadicacion
     */
    public Date getFechaRadicacion() {
        return fechaRadicacion;
    }

    /**
     * @return numRadicacion
     */
    public String getNumRadicacion() {
        return numRadicacion;
    }

    /**
     * Cambia la fecha del turno que crea la anotación
     * @param date
     */
    public void setFechaRadicacion(Date date) {
        fechaRadicacion = date;
    }

    /**
     * @param string
     */
    public void setNumRadicacion(String string) {
        numRadicacion = string;
    }

    /**
	 * Retorna el identificador del estado de la anotacion
	 * @return
	 */
	public EstadoAnotacion getEstado() {
		return estado;
	}

	/**
	 * Cambia el identificador del estado de la anotacion
	 * @param anotacion
	 */
	public void setEstado(EstadoAnotacion anotacion) {
		estado = anotacion;
	}

	/**
	 * Retorna el número que define el orden de la anotacion dentro del folio
	 * @return
	 */
	public String getOrden() {
		return orden;
	}

	/**
	 * Cambia el número que define el orden de la anotacion dentro del folio
	 * @param string
	 */
	public void setOrden(String string) {
		orden = string;
	}

	/**
	 * Retorna la especificacion de la anotacion
	 * @return
	 */
	public String getEspecificacion() {
		return especificacion;
	}

	/**
	 * Cambia la especificacion de la anotacion
	 * @param string
	 */
	public void setEspecificacion(String string) {
		especificacion = string;
	}

	/**
	 * Retorna la secuencia de salvedades de la anotación
	 * @return
	 */
	public long getLastIdSalvedad() {
		return lastIdSalvedad;
	}

	/**
	 * Retorna la secuencia de salvedades de la anotación
	 * @param l
	 */
	public void setLastIdSalvedad(long l) {
		lastIdSalvedad = l;
	}


	/**
	 * Retorna la lista turnoAnotacion
	 */
	public List getTurnoAnotacions() {
		return Collections.unmodifiableList(turnoAnotacion);
	}

	/**
	 * Adiciona un TurnoAnotacion a la lista turnoAnotacion
	 */
	public boolean addTurnoAnotacion(TurnoAnotacion newTurnoAnotacion) {
		return turnoAnotacion.add(newTurnoAnotacion);
	}

	/**
	 * Elimina un TurnoAnotacion de la lista turnoAnotacion
	 */
	public boolean removeTurnoAnotacion(TurnoAnotacion oldTurnoAnotacion) {
		return turnoAnotacion.remove(oldTurnoAnotacion);
	}

	/**
	 * Retorna el identificador del usuario que hace definitiva la anotación
	 * @return
	 */
	public Usuario getUsuarioCreacion() {
		return usuarioCreacion;
	}

	/**
	 * Cambia el identificador del usuario que hace definitiva la anotación
	 * @param usuario
	 */
	public void setUsuarioCreacion(Usuario usuario) {
		usuarioCreacion = usuario;
	}

	/**
	 * @return
	 */
	public boolean isToDelete() {
		return toDelete;
	}

	/**
	 * @param b
	 */
	public void setToDelete(boolean b) {
		toDelete = b;
	}

	/**
	 * @return
	 */
	public boolean isTemporal() {
		return temporal;
	}

	/**
	 * @param b
	 */
	public void setTemporal(boolean b) {
		temporal = b;
	}

	/**
	 * @return
	 */
	public boolean isTemporalConContraparteDefinitiva() {
		return temporalConContraparteDefinitiva;
	}

	/**
	 * @param b
	 */
	public void setTemporalConContraparteDefinitiva(boolean b) {
		temporalConContraparteDefinitiva = b;
	}
	
	/**
	 * Retorna el identificador utilizado para auditoria de actualizacion de anotaciones, guarda el ID de la anotacion modificada
	 * @return
	 */
	public String getIdAnotacionModificada() {
		return idAnotacionModificada;
	}

	/**
	 * Cambia el identificador utilizado para auditoria de actualizacion de anotaciones, guarda el ID de la anotacion modificada
	 * @param string
	 */
	public void setIdAnotacionModificada(String string) {
		idAnotacionModificada = string;
	}

	/**
	 *
	 */
	public boolean equals(Object o) {
		if (this == o) {
			return true;
		}

		if (!(o instanceof Anotacion)) {
			return false;
		}

		final Anotacion id = (Anotacion) o;

		if ((this.idAnotacion != null)
				? (!idAnotacion.equals(id.idAnotacion))
					: (id.idAnotacion != null)) {
			return false;
		}

		if ((this.idMatricula != null)
				? (!idMatricula.equals(id.idMatricula))
					: (id.idMatricula != null)) {
			return false;
		}

		return true;
	}
	
	public boolean isToUpdateValor() {
		return toUpdateValor;
	}

	/**
	 * @param b
	 */
	public void setToUpdateValor(boolean b) {
		toUpdateValor = b;
	}

	/**
	 * Retorna el identificador de usuario que crea la anotación
	 * @return usuarioCreacionTMP
	 */
	public Usuario getUsuarioCreacionTMP() {
		return usuarioCreacionTMP;
	}

	/**
	 * Cambia el identificador de usuario que crea la anotación
	 * @param usuario
	 */
	public void setUsuarioCreacionTMP(Usuario usuario) {
		usuarioCreacionTMP = usuario;
	}

	/**
	 * Retorna el identificador de datos de antiguo sistema
	 * @return
	 */
	public DatosAntiguoSistema getDatosAntiguoSistema() {
		return datosAntiguoSistema;
	}

	/**
	 * Cambia el identificador de datos de antiguo sistema
	 * @param sistema
	 */
	public void setDatosAntiguoSistema(DatosAntiguoSistema sistema) {
		datosAntiguoSistema = sistema;
	}

	/**
	 * Retorna el orden absoluto con ceros a la izquierda, campo utilizado para el ordenamiento real
	 * @return ordenLPAD
	 */
	public String getOrdenLPAD() {
		return ordenLPAD;
	}

	/**
	 * Cambia el orden absoluto con ceros a la izquierda, campo utilizado para el ordenamiento real
	 * @param string
	 */
	public void setOrdenLPAD(String string) {
		ordenLPAD = string;
	}

	/**
	 * @return heredada
	 */
	public boolean isHeredada() {
		return heredada;
	}

	/**
	 * @param b
	 */
	public void setHeredada(boolean b) {
		heredada = b;
	}

	/**
	 * Retorna un valor que indica si la anotacion es creada para encadenar 2 folios que en el sistema migrado no tienen anotaciones de por medio
	 * @return link
	 */
	public boolean isLink() {
		return link;
	}

	/**
	 * Cambia el  valor que indica si la anotacion es creada para encadenar 2 folios que en el sistema migrado no tienen anotaciones de por medio
	 * @param b
	 */
	public void setLink(boolean b) {
		link = b;
	}

	/**
	 * Cambia la lista salvedades
	 * @paranm salvedades
	 */
  public void setSalvedades(List salvedades) {
    this.salvedades = salvedades;
  }

	public String getCirculo() {
		return circulo;
	}

	public void setCirculo(String circulo) {
		this.circulo = circulo;
	}

}
